/*==============================================================================
** start.S -- the OS start code.
**
** MODIFY HISTORY:
**
** 2012-02-28 wdf Create.
==============================================================================*/
#include "bsp_config.h"

#define WTCON        0x7E004000  /* watch dog register     */

/*
 *************************************************************************
 *
 * _start:
 * The Operating System Entry (AK100 lead to this)
 *
 * the start code. do some important init, such as:
 * disable interrupt,
 * config SDRAM contorller,
 * setup stack,
 * copy exception vector,
 * clear bss(Block Started by Symbol) segment,
 * jump to C routione main().
 *
 *************************************************************************
 */

.globl _start
_start:

    /* 
     * turn off the watchdog
     */
    mov r1, #0x0
    ldr r0, =WTCON
    str r1, [r0]


    /* 
     * turn to SVC mode
     */
    mov r0, #NO_INT | MOD_SVC
    msr cpsr, r0

    /*
     * do sys-critical inits
     */
    bl  vx_sysInit

    /* 
     * Set up the IRQ, SVC stack
     */
stack_setup:
    mov r0, #NO_INT | MOD_IRQ           /* change to IRQ mode       */
    msr cpsr, r0
    ldr sp, =CONFIG_IRQ_STACK

    mov r0, #NO_INT | MOD_SVC           /* back to SVC mode         */
    msr cpsr, r0
    ldr sp, =CONFIG_SVC_STACK

    /*
     * copy exception vector to 0x50000000 -- 0x50000040  64 bytes
     * 8 jump instructions, 8 data variables
     */
copy_vector:
    adr r0, vector_start        /* r0 <- source start address */
    adr r2, vector_end          /* r2 <- source end address   */
    mov r1, #CONFIG_EXC_VECTOR  /* r1 <- target start address */
copy_loop:
    ldmia  r0!, {r3-r10}        /* copy from source address [r0]    */
    stmia  r1!, {r3-r10}        /* copy to   target address [r1]    */
    cmp    r0,   r2             /* until source end addreee [r2]    */
    blt    copy_loop            /* if r0 < r2 continue copy         */

    /* 
     * clear bss section
     */
clear_bss:
    ldr  r0, _bss_start      /* find start of bss segment        */
    ldr  r1, _bss_end        /* stop here                        */
    mov  r2, #0x00000000     /* clear                            */
clbss_l:                     /* clear bss loop...                */
    str  r2, [r0]
    add  r0, r0, #4
    cmp  r0, r1
    blt  clbss_l

    /* 
     * go to the main
     */
    ldr    pc, _main

_main: .word main

/**********************************************************************************************************
  The exception vector, will copy to 0x50000000 -- 0x50000040  (64 bytes: 8 instructions, 8 addresses)
**********************************************************************************************************/
vector_start:
    ldr    pc, _reset
    ldr    pc, _undefined_instruction
    ldr    pc, _software_interrupt
    ldr    pc, _prefetch_abort
    ldr    pc, _data_abort
    ldr    pc, _not_used
    ldr    pc, _irq
    ldr    pc, _fiq

_reset:                 .word 0x00000000            /* go to uboot */
_undefined_instruction: .word undefined_instruction
_software_interrupt:    .word software_interrupt
_prefetch_abort:        .word prefetch_abort
_data_abort:            .word data_abort
_not_used:              .word not_used
_irq:                   .word irq
_fiq:                   .word fiq

vector_end:

/**********************************************************************************************************
  .lds script Global Variables
**********************************************************************************************************/
_bss_start: .word __bss_start
_bss_end:   .word _end

/*==============================================================================
** FILE END
==============================================================================*/

